// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int      @id @default(autoincrement())
  username    String   @unique
  OAuthName   String?  @default("notYetSet")
  email       String?  @default("") //@unique
  avatar      String?  @default("https://avatarfiles.alphacoders.com/183/183501.jpg")
  createdAt   DateTime @default(now())
  accessToken String   @default("notYetSet")
  is2Fa       Boolean  @default(false)
  isOnline    Boolean  @default(false)

  createdChannels    Channel[]                @relation
  followingChannels  ChannelMember[]          @relation
  restrictedChannels ChannelUserRestriction[] @relation

  sentMessages     Message[] @relation("SentMessage")
  recievedMessages Message[] @relation("RecievedMessage")

  homeMatches Match[] @relation("Home")
  awayMatches Match[] @relation("Away")
  wonMatches  Match[] @relation("Winner")

  blocked   Blocked[] @relation("Blocked")
  blockedBy Blocked[] @relation("BlockedBy")

  sentFriendRequest     FriendRequest[] @relation("SentRequest")
  recievedFriendRequest FriendRequest[] @relation("RecievedRequest")
}

//It would be cool to have unread messages highlighted for a user, for that i can implement an other table for read messages later

model Message {
  id       Int  @id @default(autoincrement())
  sender   User @relation("SentMessage", fields: [senderId], references: [id])
  senderId Int

  // Receiver field is optional, a message can be sent to a user or a channel
  receiver   User? @relation("RecievedMessage", fields: [receiverId], references: [id])
  receiverId Int?

  // Thus channel field is optional as well
  channel   Channel? @relation(fields: [channelId], references: [id])
  channelId Int?

  content   String
  createdAt DateTime @default(now())
}

model Channel {
  id              Int                      @id @default(autoincrement())
  creator         User                     @relation(fields: [creatorId], references: [id])
  creatorId       Int
  channelUsers    ChannelMember[]          @relation
  restrictedUsers ChannelUserRestriction[] @relation
  channelMessages Message[]                @relation

  title       String       @unique
  password    String?
  channelType ChannelTypes @default(PUBLIC)
  createdAt   DateTime     @default(now())
}

model ChannelMember {
  user   User @relation(fields: [userId], references: [id])
  userId Int

  channel   Channel @relation(fields: [channelId], references: [id])
  channelId Int

  role ChannelMemberRoles @default(USER)

  @@unique([userId, channelId])
}

enum ChannelMemberRoles {
  ADMIN
  USER
}

model ChannelUserRestriction {
  restrictedUser   User @relation(fields: [restrictedUserId], references: [id])
  restrictedUserId Int

  restrictedChannel   Channel @relation(fields: [restrictedChannelId], references: [id])
  restrictedChannelId Int

  restrictionType ChannelUserRestrictionTypes

  @@unique([restrictedUserId, restrictedChannelId])
}

enum ChannelUserRestrictionTypes {
  MUTED
  BANNED
}

enum ChannelTypes {
  PUBLIC
  PROTECTED //visible to anyone but password protected
  PRIVATE //visible only to members, invitation only
}

model Match {
  id      Int      @id @default(autoincrement())
  started DateTime @default(now())
  ended   DateTime @updatedAt

  homePlayer   User @relation("Home", fields: [homePlayerId], references: [id])
  homePlayerId Int
  awayPlayer   User @relation("Away", fields: [awayPlayerId], references: [id])
  awayPlayerId Int
  winner       User @relation("Winner", fields: [winnerId], references: [id])
  winnerId     Int

  homeScore Int
  awayScore Int
}

model FriendRequest {
  sent       User @relation("SentRequest", fields: [senderId], references: [id])
  senderId   Int
  recieved   User @relation("RecievedRequest", fields: [receiverId], references: [id])
  receiverId Int

  isAccepted Boolean @default(false)

  @@unique([senderId, receiverId])
}

model Blocked {
  blockedUser    User @relation("BlockedBy", fields: [blockedUserId], references: [id])
  blockedUserId  Int
  blockingUser   User @relation("Blocked", fields: [blockingUserId], references: [id])
  blockingUserId Int

  @@unique([blockingUserId, blockedUserId])
}
